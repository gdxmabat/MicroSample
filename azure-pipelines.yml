pool:
  name: Hosted Ubuntu 1604

variables:
  projectDockerPath: 'MicroSample.Api'
  registryServerName: '$(registryName).azurecr.io'
  imageName: '$(projectName)'

  # define 4 more variables: projectName, registryName, registryLogin and registryPassword in the build pipeline in UI

steps:

- task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
  displayName: 'Prepare analysis on SonarQube'
  inputs:
    SonarQube: 'SONAR_SABA_DEV'
    projectKey: microkoa
    projectName: microkoa
    extraProperties: 'sonar.cs.vscoveragexml.reportsPaths=$(Agent.TempDirectory)/**/*.coveragexml'


- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'
    feedsToUse: config
    nugetConfigPath: NuGet.config
    externalFeedCredentials: 'NUGET_KOA'

- task: DotNetCoreCLI@2
  displayName: TEST
  inputs:
    command: test
    projects: '**/*.csproj'
  enabled: 'false'


- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '**/*.csproj'


- task: DotNetCoreCLI@2
  displayName: TEST
  inputs:
    command: test
    projects: '**/*.csproj'
    arguments: '--collect:"Code Coverage"'
    testRunTitle: 'TEST VALIDATE'
  continueOnError: true


- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '-c Release -o ./publish/backend'
    zipAfterPublish: false
    modifyOutputPath: false
    workingDirectory: MicroSample.Api


- powershell: |
   Get-ChildItem -Recurse -Filter "*.coverage" | % {
   $outfile = "$([System.IO.Path]::GetFileNameWithoutExtension($_.FullName)).coveragexml"
   $output = [System.IO.Path]::Combine([System.IO.Path]::GetDirectoryName($_.FullName), $outfile)
   "Analyse '$($_.Name)' with output '$outfile'..."
   . $env:USERPROFILE\.nuget\packages\microsoft.codecoverage\15.8.0\build\netstandard1.0\CodeCoverage\CodeCoverage.exe analyze /output:$output $_.FullName
   }
   "Done"
  displayName: 'PS Sonar'

- task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@4
  displayName: 'Run Code Analysis'

- task: SonarSource.sonarqube.291ed61f-1ee4-45d3-b1b0-bf822d9095ef.SonarQubePublish@4
  displayName: 'Publish Quality Gate Result'



- task: Docker@2
  displayName: 'Docker Build'
  inputs:
    command: build
    Dockerfile: MicroSample.Api/Dockerfile
  enabled: 'false'


- bash: 'docker build -f $(system.defaultWorkingDirectory)/$(projectDockerPath)/Dockerfile -t $(registryServerName)/$(imageName):$(build.buildId) -t $(registryServerName)/$(imageName):latest $(system.defaultWorkingDirectory)/$(projectDockerPath)'
  displayName: 'Docker Build bash'

- bash: docker login $(registryServerName) -u $(registryLogin) -p $(registryPassword)
  displayName: 'docker login'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

- bash: |
    docker push $(registryServerName)/$(imageName):$(build.buildId)
    docker push $(registryServerName)/$(imageName):latest
  displayName: 'docker push'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

- task: HelmInstaller@0
  displayName: 'Install Helm'
  inputs:
    helmVersion: 2.13.0


- bash: helm package --version $(build.buildId) --destination $(build.artifactStagingDirectory) $(system.defaultWorkingDirectory)/$(projectDockerPath)/Configuration/helm/charts/koaskeleton
  displayName: 'helm package'

- bash: az acr helm push -n $(registryName) -u $(registryLogin) -p $(registryPassword) $(build.artifactStagingDirectory)/$(projectName)-$(build.buildId).tgz
  displayName: 'az acr helm push'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
